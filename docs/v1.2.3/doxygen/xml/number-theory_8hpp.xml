<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="number-theory_8hpp" kind="file" language="C++">
    <compoundname>number-theory.hpp</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">limits</includes>
    <includes local="no">vector</includes>
    <includes refid="check_8hpp" local="yes">hexl/util/check.hpp</includes>
    <includes refid="compiler_8hpp" local="yes">hexl/util/compiler.hpp</includes>
    <includedby refid="aligned-allocator_8hpp" local="yes">aligned-allocator.hpp</includedby>
    <includedby refid="hexl_8hpp" local="yes">hexl.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>number-theory.hpp</label>
        <link refid="number-theory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>hexl/util/check.hpp</label>
        <link refid="check_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hexl/util/compiler.hpp</label>
        <link refid="compiler_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hexl/util/defines.hpp</label>
        <link refid="defines_8hpp"/>
      </node>
      <node id="6">
        <label>hexl/util/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>hexl.hpp</label>
        <link refid="hexl_8hpp"/>
      </node>
      <node id="3">
        <label>ntt.hpp</label>
        <link refid="ntt_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>number-theory.hpp</label>
        <link refid="number-theory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>aligned-allocator.hpp</label>
        <link refid="aligned-allocator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classintel_1_1hexl_1_1_multiply_factor" prot="public">intel::hexl::MultiplyFactor</innerclass>
    <innernamespace refid="namespaceintel">intel</innernamespace>
    <innernamespace refid="namespaceintel_1_1hexl">intel::hexl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="check_8hpp" kindref="compound">hexl/util/check.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compiler_8hpp" kindref="compound">hexl/util/compiler.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceintel" kindref="compound">intel</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hexl<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classintel_1_1hexl_1_1_multiply_factor" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classintel_1_1hexl_1_1_multiply_factor" kindref="compound">MultiplyFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21" refid="classintel_1_1hexl_1_1_multiply_factor_1ad7b998b4a54203d6ad83237e3b3f4c51" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classintel_1_1hexl_1_1_multiply_factor_1ad7b998b4a54203d6ad83237e3b3f4c51" kindref="member">MultiplyFactor</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classintel_1_1hexl_1_1_multiply_factor_1a801de0aa37e108b21cdb6452a15f6c76" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classintel_1_1hexl_1_1_multiply_factor_1a801de0aa37e108b21cdb6452a15f6c76" kindref="member">MultiplyFactor</ref>(uint64_t<sp/>operand,<sp/>uint64_t<sp/>bit_shift,<sp/>uint64_t<sp/>modulus)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_operand(operand)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(operand<sp/>&lt;=<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>operand</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(bit_shift<sp/>==<sp/>32<sp/>||<sp/>bit_shift<sp/>==<sp/>52<sp/>||<sp/>bit_shift<sp/>==<sp/>64,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>BitShift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bit_shift);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>op_hi<sp/>=<sp/>operand<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>bit_shift);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>op_lo<sp/>=<sp/>(bit_shift<sp/>==<sp/>64)<sp/>?<sp/>0<sp/>:<sp/>(operand<sp/>&lt;&lt;<sp/>bit_shift);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_barrett_factor<sp/>=<sp/>DivideUInt128UInt64Lo(op_hi,<sp/>op_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classintel_1_1hexl_1_1_multiply_factor_1aa1708edda697a2ebb93f6b2b9b2967aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classintel_1_1hexl_1_1_multiply_factor_1aa1708edda697a2ebb93f6b2b9b2967aa" kindref="member">BarrettFactor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_barrett_factor;<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classintel_1_1hexl_1_1_multiply_factor_1a143d0ed636511f3cd450286b89687822" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classintel_1_1hexl_1_1_multiply_factor_1a143d0ed636511f3cd450286b89687822" kindref="member">Operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_operand;<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>uint64_t<sp/>m_operand;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>uint64_t<sp/>m_barrett_factor;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespaceintel_1_1hexl_1ada0fe74afb4384b54728cba8ec3f69cd" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1ada0fe74afb4384b54728cba8ec3f69cd" kindref="member">IsPowerOfTwo</ref>(uint64_t<sp/>num)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>&amp;&amp;<sp/>!(num<sp/>&amp;<sp/>(num<sp/>-<sp/>1));<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="namespaceintel_1_1hexl_1a066a83a4b122279313279a58cf440004" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a066a83a4b122279313279a58cf440004" kindref="member">Log2</ref>(uint64_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MSB(x);<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="namespaceintel_1_1hexl_1a74a77227ebbd892a0cff5089f3d89010" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1a74a77227ebbd892a0cff5089f3d89010" kindref="member">IsPowerOfFour</ref>(uint64_t<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1ada0fe74afb4384b54728cba8ec3f69cd" kindref="member">IsPowerOfTwo</ref>(num)<sp/>&amp;&amp;<sp/>(<ref refid="namespaceintel_1_1hexl_1a066a83a4b122279313279a58cf440004" kindref="member">Log2</ref>(num)<sp/>%<sp/>2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(uint64_t<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(bits<sp/>&lt;=<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;MaximumValue<sp/>requires<sp/>bits<sp/>&lt;=<sp/>64;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bits);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;uint64_t&gt;::max)();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1ULL<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="namespaceintel_1_1hexl_1aa48183a39af615227d5b14c0fdb46105" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1aa48183a39af615227d5b14c0fdb46105" kindref="member">ReverseBits</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>bit_width);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="namespaceintel_1_1hexl_1ac949027d43c64d65400c93a148d349c6" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1ac949027d43c64d65400c93a148d349c6" kindref="member">InverseMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="namespaceintel_1_1hexl_1a838d9c2d540f99b349546461dee63252" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a838d9c2d540f99b349546461dee63252" kindref="member">MultiplyMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="namespaceintel_1_1hexl_1a0b3d06107428b15f58be1680fbf1656d" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a838d9c2d540f99b349546461dee63252" kindref="member">MultiplyMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>y_precon,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="namespaceintel_1_1hexl_1ad16852e2b8114cd9c22dd25593c76f99" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1ad16852e2b8114cd9c22dd25593c76f99" kindref="member">AddUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="namespaceintel_1_1hexl_1a4411ec648d83bfbc3ecaf96859576054" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a4411ec648d83bfbc3ecaf96859576054" kindref="member">SubUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="namespaceintel_1_1hexl_1aff7287aeef7fdb27e6ffb254adb40477" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1aff7287aeef7fdb27e6ffb254adb40477" kindref="member">PowMod</ref>(uint64_t<sp/>base,<sp/>uint64_t<sp/>exp,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="namespaceintel_1_1hexl_1a8b04aa9aed381d3c976d953efbe0a4b6" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1a8b04aa9aed381d3c976d953efbe0a4b6" kindref="member">IsPrimitiveRoot</ref>(uint64_t<sp/>root,<sp/>uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="namespaceintel_1_1hexl_1a130d3fb9218c1aaa9fbeb5d143eb288b" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a130d3fb9218c1aaa9fbeb5d143eb288b" kindref="member">GeneratePrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="namespaceintel_1_1hexl_1adcc30a762adcbbdc9d7ebefa6fffe83b" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1adcc30a762adcbbdc9d7ebefa6fffe83b" kindref="member">MinimalPrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="128" refid="namespaceintel_1_1hexl_1ad7a9d35f74908eca9240bc7675705976" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1ad7a9d35f74908eca9240bc7675705976" kindref="member">MultiplyModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y_operand,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>y_barrett_factor,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(y_operand<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y_operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y_operand</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(x<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>uint64_t<sp/>Q<sp/>=<sp/>MultiplyUInt64Hi&lt;BitShift&gt;(x,<sp/>y_barrett_factor);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y_operand<sp/>*<sp/>x<sp/>-<sp/>Q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="149" refid="namespaceintel_1_1hexl_1a8f6c714aff229c45fbba359cc67331a5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1ad7a9d35f74908eca9240bc7675705976" kindref="member">MultiplyModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(BitShift<sp/>==<sp/>64<sp/>||<sp/>BitShift<sp/>==<sp/>52,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>BitShift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>BitShift);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(x<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(y<sp/>&lt;<sp/>modulus,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceintel_1_1hexl_1a9975ccaf5ec051c07ff4e3fef5c1fefb" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>uint64_t<sp/>y_barrett<sp/>=<sp/><ref refid="classintel_1_1hexl_1_1_multiply_factor" kindref="compound">MultiplyFactor</ref>(y,<sp/>BitShift,<sp/>modulus).<ref refid="classintel_1_1hexl_1_1_multiply_factor_1aa1708edda697a2ebb93f6b2b9b2967aa" kindref="member">BarrettFactor</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MultiplyModLazy&lt;BitShift&gt;(x,<sp/>y,<sp/>y_barrett,<sp/>modulus);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="namespaceintel_1_1hexl_1a3ecce7e5a5591605703890fb3b2b6d80" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1a3ecce7e5a5591605703890fb3b2b6d80" kindref="member">AddUInt64</ref>(uint64_t<sp/>operand1,<sp/>uint64_t<sp/>operand2,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>*result<sp/>=<sp/>operand1<sp/>+<sp/>operand2;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*result<sp/>&lt;<sp/>operand1);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="namespaceintel_1_1hexl_1a1155b31afc84bd8a7080d49b66480395" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1a1155b31afc84bd8a7080d49b66480395" kindref="member">IsPrime</ref>(uint64_t<sp/>n);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">//<sp/>2^(bit_size+1)].<sp/>Ensures<sp/>each<sp/>prime<sp/>q<sp/>satisfies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>q<sp/>%<sp/>(2*ntt_size+1))<sp/>==<sp/>1</highlight></codeline>
<codeline lineno="187" refid="namespaceintel_1_1hexl_1a3a8c240e5282f1d89c281527a842ae3d" refkind="member"><highlight class="comment"></highlight><highlight class="normal">std::vector&lt;uint64_t&gt;<sp/><ref refid="namespaceintel_1_1hexl_1a3a8c240e5282f1d89c281527a842ae3d" kindref="member">GeneratePrimes</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_primes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_size,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prefer_small_primes,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ntt_size<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OutputModFactor<sp/>=<sp/>1&gt;</highlight></codeline>
<codeline lineno="196" refid="namespaceintel_1_1hexl_1a0caa5a28d4ccd975250eb28407c7012b" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a0caa5a28d4ccd975250eb28407c7012b" kindref="member">BarrettReduce64</ref>(uint64_t<sp/>input,<sp/>uint64_t<sp/>modulus,<sp/>uint64_t<sp/>q_barr)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(modulus<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>uint64_t<sp/>q<sp/>=<sp/>MultiplyUInt64Hi&lt;64&gt;(input,<sp/>q_barr);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>uint64_t<sp/>q_times_input<sp/>=<sp/>input<sp/>-<sp/>q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OutputModFactor<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q_times_input;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(q_times_input<sp/>&gt;=<sp/>modulus)<sp/>?<sp/>q_times_input<sp/>-<sp/>modulus<sp/>:<sp/>q_times_input;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InputModFactor&gt;</highlight></codeline>
<codeline lineno="215" refid="namespaceintel_1_1hexl_1ab716e0395cbfe58e76f866a9044f2a62" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1ab716e0395cbfe58e76f866a9044f2a62" kindref="member">ReduceMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>twice_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>four_times_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(InputModFactor<sp/>==<sp/>1<sp/>||<sp/>InputModFactor<sp/>==<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputModFactor<sp/>==<sp/>4<sp/>||<sp/>InputModFactor<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InputModFactor<sp/>should<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(four_times_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;four_times_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*four_times_modulus)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*four_times_modulus;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="270" refid="namespaceintel_1_1hexl_1a6440bc76d8dca81356a685991029605a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a6440bc76d8dca81356a685991029605a" kindref="member">MontgomeryReduce</ref>(uint64_t<sp/>T_hi,<sp/>uint64_t<sp/>T_lo,<sp/>uint64_t<sp/>q,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/>uint64_t<sp/>mod_R_msk,<sp/>uint64_t<sp/>inv_mod)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>(BitShift<sp/>==<sp/>64<sp/>||<sp/>BitShift<sp/>==<sp/>52,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>BitShift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>BitShift);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="check_8hpp_1ad5baaea0d21e2ec8c058a3de9d0f93c6" kindref="member">HEXL_CHECK</ref>((1ULL<sp/>&lt;&lt;<sp/>r)<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(q),</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;R<sp/>value<sp/>should<sp/>be<sp/>greater<sp/>than<sp/>q<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(q));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mq_hi;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mq_lo;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>uint64_t<sp/>m<sp/>=<sp/>((T_lo<sp/>&amp;<sp/>mod_R_msk)<sp/>*<sp/>inv_mod)<sp/>&amp;<sp/>mod_R_msk;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>MultiplyUInt64(m,<sp/>q,<sp/>&amp;mq_hi,<sp/>&amp;mq_lo);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitShift<sp/>==<sp/>52)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>mq_hi<sp/>=<sp/>(mq_hi<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>(mq_lo<sp/>&gt;&gt;<sp/>52);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>mq_lo<sp/>&amp;=<sp/>(1ULL<sp/>&lt;&lt;<sp/>52)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>uint64_t<sp/>t_hi;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>uint64_t<sp/>t_lo;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>64bit<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>t_lo<sp/>=<sp/>T_lo<sp/>+<sp/>mq_lo;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>carry<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t_lo<sp/>&lt;<sp/>T_lo);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>t_hi<sp/>=<sp/>T_hi<sp/>+<sp/>mq_hi<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>t_hi<sp/>=<sp/>t_hi<sp/>&lt;&lt;<sp/>(BitShift<sp/>-<sp/>r);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>t_lo<sp/>=<sp/>t_lo<sp/>&gt;&gt;<sp/>r;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>t_lo<sp/>=<sp/>t_hi<sp/>+<sp/>t_lo;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t_lo<sp/>&gt;=<sp/>q)<sp/>?<sp/>(t_lo<sp/>-<sp/>q)<sp/>:<sp/>t_lo;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="namespaceintel_1_1hexl_1a580110ee2020c29a279645f0deb464a2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1a580110ee2020c29a279645f0deb464a2" kindref="member">HenselLemma2adicRoot</ref>(uint32_t<sp/>r,<sp/>uint64_t<sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>uint64_t<sp/>a_prev<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>uint64_t<sp/>c<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mod_mask<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Root:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>f(x)<sp/>=<sp/>qX<sp/>+<sp/>1<sp/>and<sp/>a_(0)<sp/>=<sp/>1<sp/>then<sp/>f(1)<sp/>≡<sp/>0<sp/>mod<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>General<sp/>Case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>a_(n)<sp/>≡<sp/>a_(n-1)<sp/>mod<sp/>2^(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>a_(n)<sp/>=<sp/>a_(n-1)<sp/>+<sp/>2^(n)*t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>Find<sp/>&apos;t&apos;<sp/>such<sp/>that<sp/>f(a_(n))<sp/>=<sp/>0<sp/>mod<sp/><sp/>2^(n+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>case<sp/>in<sp/>for:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>a_(1)<sp/>≡<sp/>1<sp/>mod<sp/>2<sp/>or<sp/>a_(1)<sp/>=<sp/>1<sp/>+<sp/>2t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>Find<sp/>&apos;t&apos;<sp/>so<sp/>f(a_(1))<sp/>≡<sp/>0<sp/>mod<sp/>4<sp/><sp/>=&gt;<sp/>q(1<sp/>+<sp/>2t)<sp/>+<sp/>1<sp/>≡<sp/>0<sp/>mod<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>k<sp/>=<sp/>2;<sp/>k<sp/>&lt;=<sp/>r;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>a_prev<sp/>+<sp/>c<sp/>*<sp/>t++;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>q<sp/>*<sp/>a<sp/>+<sp/>1ULL;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(f<sp/>&amp;<sp/>mod_mask);<sp/><sp/></highlight><highlight class="comment">//<sp/>f(a)<sp/>≡<sp/>0<sp/>mod<sp/>2^(k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>mod_mask<sp/>=<sp/>mod_mask<sp/>*<sp/>2<sp/>+<sp/>1ULL;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>a_prev<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_prev;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hexl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>intel</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/fboemer/repos/DBIO/intel-hexl/hexl/include/hexl/number-theory/number-theory.hpp"/>
  </compounddef>
</doxygen>
