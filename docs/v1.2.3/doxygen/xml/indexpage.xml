<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Intel HEXL</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md__Users_fboemer_repos_DBIO_intel_hexl_README"/> <ulink url="https://github.com/intel/hexl/actions/workflows/github-ci.yml"><image type="html" name="https://github.com/intel/hexl/actions/workflows/github-ci.yml/badge.svg?branch=main" alt="Build and Test" inline="yes"></image>
</ulink></para>
<sect1 id="index_1autotoc_md0">
<title>Intel Homomorphic Encryption Acceleration Library (HEXL)</title>
<para>Intel:registered: HEXL is an open-source library which provides efficient implementations of integer arithmetic on Galois fields. Such arithmetic is prevalent in cryptography, particularly in homomorphic encryption (HE) schemes. Intel HEXL targets integer arithmetic with word-sized primes, typically 30-60 bits. Intel HEXL provides an API for 64-bit unsigned integers and targets Intel CPUs. For more details on Intel HEXL, see our <ulink url="https://arxiv.org/abs/2103.16400.pdf">whitepaper</ulink>. For tips on best performance, see <ulink url="#performance">Performance</ulink></para>
<sect2 id="index_1autotoc_md1">
<title>Contents</title>
<para><itemizedlist>
<listitem><para><ulink url="#intel-homomorphic-encryption-acceleration-library-hexl">Intel Homomorphic Encryption Acceleration Library (HEXL)</ulink><itemizedlist>
<listitem><para><ulink url="#contents">Contents</ulink></para>
</listitem><listitem><para><ulink url="#introduction">Introduction</ulink></para>
</listitem><listitem><para><ulink url="#building-intel-hexl">Building Intel HEXL</ulink><itemizedlist>
<listitem><para><ulink url="#dependencies">Dependencies</ulink></para>
</listitem><listitem><para><ulink url="#compile-time-options">Compile-time options</ulink></para>
</listitem><listitem><para><ulink url="#compiling-intel-hexl">Compiling Intel HEXL</ulink><itemizedlist>
<listitem><para><ulink url="#linux-and-mac">Linux and Mac</ulink></para>
</listitem><listitem><para><ulink url="#windows">Windows</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#performance">Performance</ulink></para>
</listitem><listitem><para><ulink url="#testing-intel-hexl">Testing Intel HEXL</ulink></para>
</listitem><listitem><para><ulink url="#benchmarking-intel-hexl">Benchmarking Intel HEXL</ulink></para>
</listitem><listitem><para><ulink url="#using-intel-hexl">Using Intel HEXL</ulink></para>
</listitem><listitem><para><ulink url="#debugging">Debugging</ulink></para>
</listitem><listitem><para><ulink url="#threading">Threading</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#community-adoption">Community Adoption</ulink></para>
</listitem><listitem><para><ulink url="#documentation">Documentation</ulink></para>
</listitem><listitem><para><ulink url="#contributing">Contributing</ulink><itemizedlist>
<listitem><para><ulink url="#repository-layout">Repository layout</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#citing-intel-hexl">Citing Intel HEXL</ulink><itemizedlist>
<listitem><para><ulink url="#version-12">Version 1.2</ulink></para>
</listitem><listitem><para><ulink url="#version-11">Version 1.1</ulink></para>
</listitem><listitem><para><ulink url="#version-10">Version 1.0</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#contributors">Contributors</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md2">
<title>Introduction</title>
<para>Many cryptographic applications, particularly homomorphic encryption (HE), rely on integer polynomial arithmetic in a finite field. HE, which enables computation on encrypted data, typically uses polynomials with degree <computeroutput>N</computeroutput> a power of two roughly in the range <computeroutput>N=[2^{10}, 2^{17}]</computeroutput>. The coefficients of these polynomials are in a finite field with a word-sized prime, <computeroutput>q</computeroutput>, up to <computeroutput>q</computeroutput>~62 bits. More precisely, the polynomials live in the ring <computeroutput>Z_q[X]/(X^N + 1)</computeroutput>. That is, when adding or multiplying two polynomials, each coefficient of the result is reduced by the prime modulus <computeroutput>q</computeroutput>. When multiplying two polynomials, the resulting polynomials of degree <computeroutput>2N</computeroutput> is additionally reduced by taking the remainder when dividing by <computeroutput>X^N+1</computeroutput>.</para>
<para>The primary bottleneck in many HE applications is polynomial-polynomial multiplication in <computeroutput>Z_q[X]/(X^N + 1)</computeroutput>. For efficient implementation, Intel HEXL implements the negacyclic number-theoretic transform (NTT). To multiply two polynomials, <computeroutput>q_1(x), q_2(x)</computeroutput> using the NTT, we perform the FwdNTT on the two input polynomials, then perform an element-wise modular multiplication, and perform the InvNTT on the result.</para>
<para>Intel HEXL implements the following functions:<itemizedlist>
<listitem><para>The forward and inverse negacyclic number-theoretic transform (NTT)</para>
</listitem><listitem><para>Element-wise vector-vector modular multiplication</para>
</listitem><listitem><para>Element-wise vector-scalar modular multiplication with optional addition</para>
</listitem><listitem><para>Element-wise modular multiplication</para>
</listitem></itemizedlist>
</para>
<para>For each function, the library implements one or several Intel(R) AVX-512 implementations, as well as a less performant, more readable native C++ implementation. Intel HEXL will automatically choose the best implementation for the given CPU Intel(R) AVX-512 feature set. In particular, when the modulus <computeroutput>q</computeroutput> is less than <computeroutput>2^{50}</computeroutput>, the AVX512IFMA instruction set available on Intel IceLake server and IceLake client will provide a more efficient implementation.</para>
<para>For additional functionality, see the public headers, located in <computeroutput>include/hexl</computeroutput></para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Building Intel HEXL</title>
<para>Intel HEXL can be built in several ways. Intel HEXL has been uploaded to the <ulink url="https://github.com/microsoft/vcpkg">Microsoft vcpkg</ulink> C++ package manager, which supports Linux, macOS, and Windows builds. See the vcpkg repository for instructions to build Intel HEXL with vcpkg, e.g. run <computeroutput>vcpkg install hexl</computeroutput>. There may be some delay in uploading latest release ports to vcpkg. Intel HEXL provides port files to build the latest version with vcpkg. For a static build, run <computeroutput>vcpkg install hexl --overlay-ports=/path/to/hexl/port/hexl --head</computeroutput>. For dynamic build, use the custom triplet file and run <computeroutput>vcpkg install hexl:hexl-dynamic-build --overlay-ports=/path/to/hexl/port/hexl --head --overlay-triplets=/path/to/hexl/port/hexl</computeroutput>. For detailed explanation, see <ulink url="https://devblogs.microsoft.com/cppblog/registries-bring-your-own-libraries-to-vcpkg/">instruction</ulink> for building vcpkg port using overlays and use of <ulink url="https://github.com/microsoft/vcpkg/blob/master/docs/examples/overlay-triplets-linux-dynamic.md#building-dynamic-libraries-on-linux">custom triplet</ulink> provided by vcpkg.</para>
<para>Intel HEXL also supports a build using the CMake build system. See below for the instructions to build Intel HEXL from source using CMake.</para>
<sect3 id="index_1autotoc_md4">
<title>Dependencies</title>
<para>We have tested Intel HEXL on the following operating systems:<itemizedlist>
<listitem><para>Ubuntu 20.04</para>
</listitem><listitem><para>macOS 10.15</para>
</listitem><listitem><para>Microsoft Windows 10</para>
</listitem></itemizedlist>
</para>
<para>Intel HEXL requires the following dependencies:</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>Dependency   </para>
</entry><entry thead="yes"><para>Version    </para>
</entry></row>
<row>
<entry thead="no"><para>CMake   </para>
</entry><entry thead="no"><para>&gt;= 3.13    </para>
</entry></row>
<row>
<entry thead="no"><para>Compiler   </para>
</entry><entry thead="no"><para>gcc &gt;= 7.0, clang++ &gt;= 5.0, MSVC &gt;= 2019   </para>
</entry></row>
</table>
</para>
</sect3>
<sect3 id="index_1autotoc_md5">
<title>Compile-time options</title>
<para>In addition to the standard CMake build options, Intel HEXL supports several compile-time flags to configure the build. For convenience, they are listed below:</para>
<para><table rows="7" cols="4"><row>
<entry thead="yes"><para>CMake option   </para>
</entry><entry thead="yes"><para>Values   </para>
</entry><entry thead="yes"><para>Default   </para>
</entry><entry thead="yes"><para></para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_BENCHMARK   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>ON   </para>
</entry><entry thead="no"><para>Set to ON to enable benchmark suite via Google benchmark    </para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_COVERAGE   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>OFF   </para>
</entry><entry thead="no"><para>Set to ON to enable coverage report of unit-tests    </para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_SHARED_LIB   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>OFF   </para>
</entry><entry thead="no"><para>Set to ON to enable building shared library    </para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_DOCS   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>OFF   </para>
</entry><entry thead="no"><para>Set to ON to enable building of documentation    </para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_TESTING   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>ON   </para>
</entry><entry thead="no"><para>Set to ON to enable building of unit-tests    </para>
</entry></row>
<row>
<entry thead="no"><para>HEXL_TREAT_WARNING_AS_ERROR   </para>
</entry><entry thead="no"><para>ON / OFF   </para>
</entry><entry thead="no"><para>OFF   </para>
</entry><entry thead="no"><para>Set to ON to treat all warnings as error   </para>
</entry></row>
</table>
</para>
</sect3>
<sect3 id="index_1autotoc_md6">
<title>Compiling Intel HEXL</title>
<para>To compile Intel HEXL from source code, first clone the repository and change directories to the where the source has been cloned. </para>
<sect4 id="index_1autotoc_md7">
<title>Linux and Mac</title>
<para>The instructions to build Intel HEXL are common to Linux and MacOS.</para>
<para>Then, to configure the build, call <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build</highlight></codeline>
</programlisting> adding the desired compile-time options with a <computeroutput>-D</computeroutput> flag. For instance, to build Intel HEXL as a shared library, call <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-DHEXL_SHARED_LIB=ON</highlight></codeline>
</programlisting></para>
<para>Then, to build Intel HEXL, call <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build</highlight></codeline>
</programlisting> This will build the Intel HEXL library in the <computeroutput>build/hexl/lib/</computeroutput> directory.</para>
<para>To install Intel HEXL to the installation directory, run <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--install<sp/>build</highlight></codeline>
</programlisting> To use a non-standard installation directory, configure the build with <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-DCMAKE_INSTALL_PREFIX=/path/to/install</highlight></codeline>
</programlisting> before proceeding with the build and installation directions above.</para>
</sect4>
<sect4 id="index_1autotoc_md8">
<title>Windows</title>
<para>To compile Intel HEXL on Windows using Visual Studio in Release mode, configure the build via <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-G<sp/>&quot;Visual<sp/>Studio<sp/>16<sp/>2019&quot;<sp/>-DCMAKE_BUILD_TYPE=Release</highlight></codeline>
</programlisting> adding the desired compile-time options with a <computeroutput>-D</computeroutput> flag (see <ulink url="#compile-time-options">Compile-time options</ulink>).</para>
<para>To specify the desired build configuration, pass either <computeroutput>--config Debug</computeroutput> or <computeroutput>--config Release</computeroutput> to the build step and install steps. For instance, to build Intel HEXL in Release mode, call <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--config<sp/>Release</highlight></codeline>
</programlisting> This will build the Intel HEXL library in the <computeroutput>build/hexl/lib/</computeroutput> or <computeroutput>build/hexl/Release/lib</computeroutput> directory.</para>
<para>To install Intel HEXL to the installation directory, run <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>install<sp/>--config<sp/>Release</highlight></codeline>
</programlisting> To use a non-standard installation directory, configure the build with <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>-S<sp/>.<sp/>-B<sp/>build<sp/>-G<sp/>&quot;Visual<sp/>Studio<sp/>16<sp/>2019&quot;<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>-DCMAKE_INSTALL_PREFIX=/path/to/install</highlight></codeline>
</programlisting> before proceeding with the build and installation directions above.</para>
</sect4>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md9">
<title>Performance</title>
<para>For best performance, we recommend using Intel HEXL on a Linux system with the clang++-12 compiler. We also recommend using a processor with Intel AVX512DQ support, with best performance on processors supporting Intel AVX512-IFMA52. To determine if your processor supports AVX512-IFMA52, simply look for <computeroutput>-- Setting HEXL_HAS_AVX512IFMA</computeroutput> printed during the configure step.</para>
<para>See the below table for setting the modulus <computeroutput>q</computeroutput> for best performance. <table rows="3" cols="2"><row>
<entry thead="yes"><para>Instruction Set   </para>
</entry><entry thead="yes"><para>Bound on modulus <computeroutput>q</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>AVX512-DQ   </para>
</entry><entry thead="no"><para><computeroutput>q &lt; 2^30</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>AVX512-IFMA52   </para>
</entry><entry thead="no"><para><computeroutput>q &lt; 2^50</computeroutput>   </para>
</entry></row>
</table>
</para>
<para>Some speedup is still expected for moduli <computeroutput>q &gt; 2^30</computeroutput> using the AVX512-DQ instruction set.</para>
</sect2>
<sect2 id="index_1autotoc_md10">
<title>Testing Intel HEXL</title>
<para>To run a set of unit tests via <ulink url="https://github.com/google/googletest">Googletest</ulink>, configure and build Intel HEXL with <computeroutput>-DHEXL_TESTING=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). Then, run <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>unittest</highlight></codeline>
</programlisting> The unit-test executable itself is located at <computeroutput>build/test/unit-test</computeroutput> on Linux and Mac, and at <computeroutput>build\test\Release\unit-test.exe</computeroutput> or <computeroutput>build\test\Debug\unit-test.exe</computeroutput> on Windows. </para>
</sect2>
<sect2 id="index_1autotoc_md11">
<title>Benchmarking Intel HEXL</title>
<para>To run a set of benchmarks via <ulink url="https://github.com/google/benchmark">Google benchmark</ulink>, configure and build Intel HEXL with <computeroutput>-DHEXL_BENCHMARK=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). Then, run <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>bench</highlight></codeline>
</programlisting> On Windows, run <programlisting filename=".bash"><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>bench<sp/>--config<sp/>Release</highlight></codeline>
</programlisting></para>
<para>The benchmark executable itself is located at <computeroutput>build/benchmark/bench_hexl</computeroutput> on Linux and Mac, and at <computeroutput>build\benchmark\Debug\bench_hexl.exe</computeroutput> or <computeroutput>build\benchmark\Release\bench_hexl.exe</computeroutput> on Windows.</para>
</sect2>
<sect2 id="index_1autotoc_md12">
<title>Using Intel HEXL</title>
<para>The <computeroutput>example</computeroutput> folder has an example of using Intel HEXL in a third-party project.</para>
</sect2>
<sect2 id="index_1autotoc_md13">
<title>Debugging</title>
<para>For optimal performance, Intel HEXL does not perform input validation. In many cases the time required for the validation would be longer than the execution of the function itself. To debug Intel HEXL, configure and build Intel HEXL with <computeroutput>-DCMAKE_BUILD_TYPE=Debug</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). This will generate a debug version of the library, e.g. <computeroutput>libhexl_debug.a</computeroutput>, that can be used to debug the execution. In Debug mode, Intel HEXL will also link against <ulink url="https://github.com/google/sanitizers/wiki/AddressSanitizer">Address Sanitizer</ulink>.</para>
<para><bold>Note</bold>, enabling <computeroutput>CMAKE_BUILD_TYPE=Debug</computeroutput> will result in a significant runtime overhead.</para>
<para>To enable verbose logging for the benchmarks or unit-tests in a Debug build, add the log level as a command-line argument, e.g. <computeroutput>build/benchmark/bench_hexl --v=9</computeroutput>. See <ulink url="https://github.com/amrayn/easyloggingpp#application-arguments">easyloggingpp&apos;s documentation</ulink> for more details.</para>
</sect2>
<sect2 id="index_1autotoc_md14">
<title>Threading</title>
<para>Intel HEXL is single-threaded and thread-safe.</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md15">
<title>Community Adoption</title>
<para>Intel HEXL has been integrated to the following homomorphic encryption libraries:<itemizedlist>
<listitem><para><ulink url="https://github.com/homenc/HElib">HElib</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/microsoft/SEAL">Microsoft SEAL</ulink></para>
</listitem><listitem><para><ulink url="https://gitlab.com/palisade/palisade-release">PALISADE</ulink></para>
</listitem></itemizedlist>
</para>
<para>See also the <ulink url="https://github.com/intel/he-toolkit">Intel Homomorphic Encryption Toolkit</ulink> for example uses cases using HEXL.</para>
<para>Please let us know if you are aware of any other uses of Intel HEXL.</para>
</sect1>
<sect1 id="index_1autotoc_md16">
<title>Documentation</title>
<para>Intel HEXL supports documentation via Doxygen. See <ulink url="https://intel.github.io/hexl">https://intel.github.io/hexl</ulink> for the latest Doxygen documentation.</para>
<para>To build documentation, first install <computeroutput>doxygen</computeroutput> and <computeroutput>graphviz</computeroutput>, e.g. <programlisting filename=".bash"><codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>doxygen<sp/>graphviz</highlight></codeline>
</programlisting> Then, configure Intel HEXL with <computeroutput>-DHEXL_DOCS=ON</computeroutput> (see <ulink url="#compile-time-options">Compile-time options</ulink>). To build Doxygen documentation, after configuring Intel HEXL with <computeroutput>-DHEXL_DOCS=ON</computeroutput>, run <programlisting><codeline><highlight class="normal">cmake<sp/>--build<sp/>build<sp/>--target<sp/>docs</highlight></codeline>
</programlisting> To view the generated Doxygen documentation, open the generated <computeroutput>docs/doxygen/html/index.html</computeroutput> file in a web browser.</para>
</sect1>
<sect1 id="index_1autotoc_md17">
<title>Contributing</title>
<para>This project welcomes external contributions. To contribute to Intel HEXL, see <ref refid="md___users_fboemer_repos__d_b_i_o_intel_hexl__c_o_n_t_r_i_b_u_t_i_n_g" kindref="compound">CONTRIBUTING.md</ref>. We encourage feedback and suggestions via <ulink url="https://github.com/intel/hexl/issues">Github Issues</ulink> as well as discussion via <ulink url="https://github.com/intel/hexl/discussions">Github Discussions</ulink>.</para>
<sect2 id="index_1autotoc_md18">
<title>Repository layout</title>
<para>Public headers reside in the <computeroutput>hexl/include</computeroutput> folder. Private headers, e.g. those containing Intel(R) AVX-512 code should not be put in this folder.</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md19">
<title>Citing Intel HEXL</title>
<para>To cite Intel HEXL, please use the following BibTeX entry.</para>
<sect3 id="index_1autotoc_md20">
<title>Version 1.2</title>
<para><programlisting filename=".tex"><codeline><highlight class="normal">@misc{IntelHEXL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>author={Boemer,<sp/>Fabian<sp/>and<sp/>Kim,<sp/>Sejun<sp/>and<sp/>Seifu,<sp/>Gelila<sp/>and<sp/>de<sp/>Souza,<sp/>Fillipe<sp/>DM<sp/>and<sp/>Gopal,<sp/>Vinodh<sp/>and<sp/>others},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>{{I}ntel<sp/>{HEXL}<sp/>(release<sp/>1.2)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>howpublished<sp/>=<sp/>{\url{https://github.com/intel/hexl}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>month<sp/>=<sp/>september,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>year<sp/>=<sp/>2021,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>{Intel<sp/>HEXL}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md21">
<title>Version 1.1</title>
<para><programlisting filename=".tex"><codeline><highlight class="normal">@misc{IntelHEXL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>author={Boemer,<sp/>Fabian<sp/>and<sp/>Kim,<sp/>Sejun<sp/>and<sp/>Seifu,<sp/>Gelila<sp/>and<sp/>de<sp/>Souza,<sp/>Fillipe<sp/>DM<sp/>and<sp/>Gopal,<sp/>Vinodh<sp/>and<sp/>others},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>{{I}ntel<sp/>{HEXL}<sp/>(release<sp/>1.1)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>howpublished<sp/>=<sp/>{\url{https://github.com/intel/hexl}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>month<sp/>=<sp/>may,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>year<sp/>=<sp/>2021,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>{Intel<sp/>HEXL}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md22">
<title>Version 1.0</title>
<para><programlisting filename=".tex"><codeline><highlight class="normal">@misc{IntelHEXL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>author={Boemer,<sp/>Fabian<sp/>and<sp/>Kim,<sp/>Sejun<sp/>and<sp/>Seifu,<sp/>Gelila<sp/>and<sp/>de<sp/>Souza,<sp/>Fillipe<sp/>DM<sp/>and<sp/>Gopal,<sp/>Vinodh<sp/>and<sp/>others},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>{{I}ntel<sp/>{HEXL}<sp/>(release<sp/>1.0)},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>howpublished<sp/>=<sp/>{\url{https://github.com/intel/hexl}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>month<sp/>=<sp/>april,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>year<sp/>=<sp/>2021,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>{Intel<sp/>HEXL}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
</sect1>
<sect1 id="index_1autotoc_md23">
<title>Contributors</title>
<para>The Intel contributors to this project, sorted by last name, are<itemizedlist>
<listitem><para><ulink url="https://www.linkedin.com/in/paky-abu-alam-89797710/">Paky Abu-Alam</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/flavio-bergamaschi-1634141/">Flavio Bergamaschi</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/fabian-boemer-5a40a9102/">Fabian Boemer</ulink> (lead)</para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/jeremy-bottleson-38852a7/">Jeremy Bottleson</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/jacklhcrawford/">Jack Crawford</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/fillipe-d-m-de-souza-a8281820/">Fillipe D.M. de Souza</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/sergey-ivanov-451b72195/">Sergey Ivanov</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/akshaya-jagannadharao/">Akshaya Jagannadharao</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/jingyi-jin-655735/">Jingyi Jin</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/sejun-kim-2b1b4866/">Sejun Kim</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/nir-peled-4a52266/">Nir Peled</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/kylanrace/">Kylan Race</ulink></para>
</listitem><listitem><para><ulink url="https://www.linkedin.com/in/gelila-seifu/">Gelila Seifu</ulink></para>
</listitem></itemizedlist>
</para>
<para>In addition to the Intel contributors listed, we are also grateful to contributions to this project that are not reflected in the Git history:<itemizedlist>
<listitem><para><ulink url="https://www.linkedin.com/in/apapadimitriou/">Antonis Papadimitriou</ulink> </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <location file="/Users/fboemer/repos/DBIO/intel-hexl/README.md"/>
  </compounddef>
</doxygen>
