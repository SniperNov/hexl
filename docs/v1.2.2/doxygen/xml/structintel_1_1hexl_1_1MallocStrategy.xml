<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structintel_1_1hexl_1_1MallocStrategy" kind="struct" language="C++" prot="public">
    <compoundname>intel::hexl::MallocStrategy</compoundname>
    <basecompoundref refid="structintel_1_1hexl_1_1AllocatorBase" prot="public" virt="non-virtual">intel::hexl::AllocatorBase</basecompoundref>
    <includes refid="aligned-allocator_8hpp" local="no">aligned-allocator.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structintel_1_1hexl_1_1MallocStrategy_1a010052a3f5e39991d57a38742d853738" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void* intel::hexl::MallocStrategy::allocate</definition>
        <argsstring>(size_t bytes_count) final</argsstring>
        <name>allocate</name>
        <reimplements refid="structintel_1_1hexl_1_1AllocatorBase_1aadf587e7617fbace2e9d3b4f9d9e8af0">allocate</reimplements>
        <param>
          <type>size_t</type>
          <declname>bytes_count</declname>
        </param>
        <briefdescription>
<para>Allocates byte_count bytes of memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bytes_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to allocate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the allocated memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="19" column="8" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="structintel_1_1hexl_1_1MallocStrategy_1af45ff5d0c9b1e867fac481f447a4569c" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>void intel::hexl::MallocStrategy::deallocate</definition>
        <argsstring>(void *p, size_t n) final</argsstring>
        <name>deallocate</name>
        <reimplements refid="structintel_1_1hexl_1_1AllocatorBase_1a0f03686f9b78728d4d228ceaf4c2948e">deallocate</reimplements>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Deallocate memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to deallocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to deallocate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="21" column="8" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="21" bodyend="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocater implementation using malloc and free. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>intel::hexl::AllocatorBase</label>
        <link refid="structintel_1_1hexl_1_1AllocatorBase"/>
      </node>
      <node id="1">
        <label>intel::hexl::MallocStrategy</label>
        <link refid="structintel_1_1hexl_1_1MallocStrategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>intel::hexl::AllocatorBase</label>
        <link refid="structintel_1_1hexl_1_1AllocatorBase"/>
      </node>
      <node id="1">
        <label>intel::hexl::MallocStrategy</label>
        <link refid="structintel_1_1hexl_1_1MallocStrategy"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="18" column="35" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="18" bodyend="25"/>
    <listofallmembers>
      <member refid="structintel_1_1hexl_1_1MallocStrategy_1a010052a3f5e39991d57a38742d853738" prot="public" virt="virtual"><scope>intel::hexl::MallocStrategy</scope><name>allocate</name></member>
      <member refid="structintel_1_1hexl_1_1MallocStrategy_1af45ff5d0c9b1e867fac481f447a4569c" prot="public" virt="virtual"><scope>intel::hexl::MallocStrategy</scope><name>deallocate</name></member>
      <member refid="structintel_1_1hexl_1_1AllocatorBase_1ac8a2afdc70cef8b7c9342aa2281ea4d5" prot="public" virt="virtual"><scope>intel::hexl::MallocStrategy</scope><name>~AllocatorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
