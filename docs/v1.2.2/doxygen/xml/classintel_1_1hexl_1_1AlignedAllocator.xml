<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classintel_1_1hexl_1_1AlignedAllocator" kind="class" language="C++" prot="public">
    <compoundname>intel::hexl::AlignedAllocator</compoundname>
    <includes refid="aligned-allocator_8hpp" local="no">aligned-allocator.hpp</includes>
    <innerclass refid="structintel_1_1hexl_1_1AlignedAllocator_1_1rebind" prot="public">intel::hexl::AlignedAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>uint64_t</type>
        <declname>Alignment</declname>
        <defname>Alignment</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classintel_1_1hexl_1_1AlignedAllocator_1a8a3b7b0531d253a37a59fe1ffe12ec8a" prot="public" static="no">
        <type>T</type>
        <definition>using intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="38" column="3" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classintel_1_1hexl_1_1AlignedAllocator_1aaded07599020ca35e89e078674263c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>uint64_t</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class AlignedAllocator</definition>
        <argsstring></argsstring>
        <name>AlignedAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="36" column="3" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classintel_1_1hexl_1_1AlignedAllocator_1ae8314f7cfe3690382f638e9812e0fcf0" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceintel_1_1hexl_1aced64250965d3b78827d8009634eef0c" kindref="member">AllocatorStrategyPtr</ref></type>
        <definition>AllocatorStrategyPtr intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::m_alloc_impl</definition>
        <argsstring></argsstring>
        <name>m_alloc_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="102" column="24" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1afb7109e1c05fc55412ecfdc36894f7e5" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::AlignedAllocator</definition>
        <argsstring>(AllocatorStrategyPtr strategy=nullptr) noexcept</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type><ref refid="namespaceintel_1_1hexl_1aced64250965d3b78827d8009634eef0c" kindref="member">AllocatorStrategyPtr</ref></type>
          <declname>strategy</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="40" column="12" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1a60bc693dbefeb259d375daab227bb82c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::AlignedAllocator</definition>
        <argsstring>(const AlignedAllocator &amp;src)=default</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type>const <ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="43" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1ad8b750d8cb58695b1b6ee10f5a01173c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
        <definition>AlignedAllocator&amp; intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::operator=</definition>
        <argsstring>(const AlignedAllocator &amp;src)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="44" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1a7ef7928d5be819410959faf80f6746cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::AlignedAllocator</definition>
        <argsstring>(const AlignedAllocator&lt; U, Alignment &gt; &amp;src)</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type>const <ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&lt; U, Alignment &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="47" column="3" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1a6841e8cef5bedf494f47370062c73cbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::~AlignedAllocator</definition>
        <argsstring>()</argsstring>
        <name>~AlignedAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="50" column="3" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1a6f8f9c34b0ddab249c945ddb6609c6dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::operator==</definition>
        <argsstring>(const AlignedAllocator &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="57" column="8" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1a6b59d9d7304cda06b8c166dd865ff5db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::operator!=</definition>
        <argsstring>(const AlignedAllocator &amp;)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classintel_1_1hexl_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="59" column="8" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1ac007b85746672b4e777aa9561b54f8a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::allocate</definition>
        <argsstring>(size_t n)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Allocates <computeroutput>n</computeroutput> elements aligned to Alignment-byte boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to the aligned allocated memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="63" column="5" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="63" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classintel_1_1hexl_1_1AlignedAllocator_1af370e3d86c582bcf1370656080bab1ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::AlignedAllocator&lt; T, Alignment &gt;::deallocate</definition>
        <argsstring>(T *p, size_t n)</argsstring>
        <name>deallocate</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="92" column="8" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="92" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocates memory aligned to Alignment-byte sized boundaries. </para>
    </briefdescription>
    <detaileddescription>
<para>Alignment must be a power of two </para>
    </detaileddescription>
    <location file="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" line="33" column="23" bodyfile="/home/gelila/Desktop/workspace/hexl/hexl/include/hexl/util/aligned-allocator.hpp" bodystart="33" bodyend="103"/>
    <listofallmembers>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1aaded07599020ca35e89e078674263c63" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1afb7109e1c05fc55412ecfdc36894f7e5" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a60bc693dbefeb259d375daab227bb82c" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a7ef7928d5be819410959faf80f6746cc" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1ac007b85746672b4e777aa9561b54f8a9" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>allocate</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1af370e3d86c582bcf1370656080bab1ec" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>deallocate</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1ae8314f7cfe3690382f638e9812e0fcf0" prot="private" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>m_alloc_impl</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a6b59d9d7304cda06b8c166dd865ff5db" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>operator!=</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1ad8b750d8cb58695b1b6ee10f5a01173c" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>operator=</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a6f8f9c34b0ddab249c945ddb6609c6dd" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>operator==</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a8a3b7b0531d253a37a59fe1ffe12ec8a" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>value_type</name></member>
      <member refid="classintel_1_1hexl_1_1AlignedAllocator_1a6841e8cef5bedf494f47370062c73cbc" prot="public" virt="non-virtual"><scope>intel::hexl::AlignedAllocator</scope><name>~AlignedAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
